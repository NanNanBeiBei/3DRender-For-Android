package com.example.dviewer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.opengl.GLES20;

//加载后的物体――仅携带顶点信息，颜色随机
public class BuildMandel_ShaderModel
{	
	int mProgram;//自定义渲染管线着色器程序id  
    int muMVPMatrixHandle;//总变换矩阵引用
    int maPositionHandle; //顶点位置属性引用  
    int mresolutionXHandle;//resolution属性索引
    int mresolutionYHandle;//resolution属性索引
    int mtime;            //时间属性索引
    int maTexCoorHandle; //顶点纹理坐标属性引用  
    String mVertexShader;//顶点着色器代码脚本    	 
    String mFragmentShader;//片元着色器代码脚本    
	FloatBuffer   mVertexBuffer;//顶点坐标数据缓冲  
	FloatBuffer   mTexCoorBuffer;//顶点纹理坐标数据缓冲
    int vCount=0;  
    public float getTime()
    {
    	SimpleDateFormat dateFormatGmt = new SimpleDateFormat("yyyy:MM:dd:HH:mm:ss:SSS");
    	String currenttime=dateFormatGmt.format(new Date());
    	String[] f=currenttime.split(":");
    	float s=Float.valueOf(f[6]);//获取毫秒
    	float t=Float.valueOf(f[5]);//获取秒
    	float fianltime=s+t*1000;
    	return fianltime/1000;	
    } 
    public BuildMandel_ShaderModel(MySurfaceView mv,Model model)
    {    	
    	//初始化顶点坐标与着色数据
    	initVertexData(model.v,model.vt);
    	//初始化shader        
    	initShader(mv);
    }
    
    //初始化顶点坐标与着色数据的方法
    public void initVertexData(float[] vertices,float texCoors[])
    {
    	//顶点坐标数据的初始化================begin============================
    	vCount=vertices.length/3;   
		
        //创建顶点坐标数据缓冲
        //vertices.length*4是因为一个整数四个字节
        ByteBuffer vbb = ByteBuffer.allocateDirect(vertices.length*4);
        vbb.order(ByteOrder.nativeOrder());//设置字节顺序
        mVertexBuffer = vbb.asFloatBuffer();//转换为Float型缓冲
        mVertexBuffer.put(vertices);//向缓冲区中放入顶点坐标数据
        mVertexBuffer.position(0);//设置缓冲区起始位置
        //特别提示：由于不同平台字节顺序不同数据单元不是字节的一定要经过ByteBuffer
        //转换，关键是要通过ByteOrder设置nativeOrder()，否则有可能会出问题
        //顶点坐标数据的初始化================end============================             
        
        //顶点纹理坐标数据的初始化================begin============================  
        ByteBuffer tbb = ByteBuffer.allocateDirect(texCoors.length*4);
        tbb.order(ByteOrder.nativeOrder());//设置字节顺序
        mTexCoorBuffer = tbb.asFloatBuffer();//转换为Float型缓冲
        mTexCoorBuffer.put(texCoors);//向缓冲区中放入顶点纹理坐标数据
        mTexCoorBuffer.position(0);//设置缓冲区起始位置
        //特别提示：由于不同平台字节顺序不同数据单元不是字节的一定要经过ByteBuffer
        //转换，关键是要通过ByteOrder设置nativeOrder()，否则有可能会出问题
        //顶点纹理坐标数据的初始化================end============================
    }
    
    //初始化shader
    public void initShader(MySurfaceView mv)
    {
    	//加载顶点着色器的脚本内容
        mVertexShader=ShaderUtil.loadFromAssetsFile("mandelvertex", mv.getResources());
        //加载片元着色器的脚本内容
        mFragmentShader=ShaderUtil.loadFromAssetsFile("mandelfrag", mv.getResources());  
        //基于顶点着色器与片元着色器创建程序
        mProgram = ShaderUtil.createProgram(mVertexShader, mFragmentShader);
        //获取程序中顶点位置属性引用  
        maPositionHandle = GLES20.glGetAttribLocation(mProgram, "aPosition");
        //获取程序中总变换矩阵引用
        muMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");  
      
        maTexCoorHandle= GLES20.glGetAttribLocation(mProgram, "aTexCoord");   
        //获取分辨率属性引用
        mresolutionXHandle=GLES20.glGetUniformLocation(mProgram, "resolutionX"); 
        //获取分辨率属性引用
        mresolutionYHandle=GLES20.glGetUniformLocation(mProgram, "resolutionY"); 
        //获取时间属性索引
        mtime=GLES20.glGetUniformLocation(mProgram, "time");      
    }

    //初始化shader
    
    public void drawSelf(int texId)
    {        
    	 //制定使用某套着色器程序
    	 GLES20.glUseProgram(mProgram);
         //将最终变换矩阵传入着色器程序
         GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, MatrixState.getFinalMatrix(), 0); 
       
         GLES20.glUniform1f(mtime, getTime());
         //分辨率属性传到着色器
         GLES20.glUniform1f(mresolutionXHandle,  720f);
         //分辨率属性传到着色器
         GLES20.glUniform1f(mresolutionYHandle,  1280f);
         // 将顶点位置数据传入渲染管线
         GLES20.glVertexAttribPointer  
         (
         		maPositionHandle,   
         		3, 
         		GLES20.GL_FLOAT, 
         		false,
                3*4,   
                mVertexBuffer
         );       
        
         GLES20.glVertexAttribPointer  
         (
        		maTexCoorHandle, 
         		2, 
         		GLES20.GL_FLOAT, 
         		false,
                2*4,   
                mTexCoorBuffer
         );
         //启用顶点位置、法向量、纹理坐标数据
         GLES20.glEnableVertexAttribArray(maPositionHandle);  
     
         GLES20.glEnableVertexAttribArray(maTexCoorHandle); 
         //绑定纹理
         GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
         GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texId);
         //绘制加载的物体
         GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vCount); 
    }    

}

